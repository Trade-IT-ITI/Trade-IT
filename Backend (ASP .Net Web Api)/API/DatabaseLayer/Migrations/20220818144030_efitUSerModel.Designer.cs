// <auto-generated />
using System;
using DatabaseLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220818144030_efitUSerModel")]
    partial class efitUSerModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DatabaseLayer.Models.Ad", b =>
                {
                    b.Property<int>("AdID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdID"), 1L, 1);

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("AdID");

                    b.HasIndex("ProductId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AreaId");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            CityId = 1,
                            Name = "Ain Shams"
                        },
                        new
                        {
                            AreaId = 2,
                            CityId = 1,
                            Name = "Al Mataryah"
                        },
                        new
                        {
                            AreaId = 3,
                            CityId = 2,
                            Name = "Al Haram"
                        },
                        new
                        {
                            AreaId = 4,
                            CityId = 2,
                            Name = "Imbaba"
                        },
                        new
                        {
                            AreaId = 5,
                            CityId = 3,
                            Name = "Samyah El Gamal St"
                        },
                        new
                        {
                            AreaId = 6,
                            CityId = 3,
                            Name = "AL Sadr Hospital"
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Furniture"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Clothes"
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.CategoryInstruction", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("InstructionId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "InstructionId");

                    b.HasIndex("InstructionId");

                    b.ToTable("CategoriesInstructions");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            InstructionId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            InstructionId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            InstructionId = 1
                        },
                        new
                        {
                            CategoryId = 1,
                            InstructionId = 2
                        },
                        new
                        {
                            CategoryId = 2,
                            InstructionId = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            InstructionId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            InstructionId = 3
                        },
                        new
                        {
                            CategoryId = 1,
                            InstructionId = 5
                        },
                        new
                        {
                            CategoryId = 3,
                            InstructionId = 4
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "Cairo"
                        },
                        new
                        {
                            CityId = 2,
                            Name = "Giza"
                        },
                        new
                        {
                            CityId = 3,
                            Name = "Mansoura"
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.Favourite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId1");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstructionId"), 1L, 1);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InstructionId");

                    b.ToTable("Instructions");

                    b.HasData(
                        new
                        {
                            InstructionId = 1,
                            Text = "you should meet product's owner in a public place"
                        },
                        new
                        {
                            InstructionId = 2,
                            Text = "it would be better if you brought someone with you to witness selling process"
                        },
                        new
                        {
                            InstructionId = 3,
                            Text = "check product's battery before buying"
                        },
                        new
                        {
                            InstructionId = 4,
                            Text = "make sure the cloth have no cuts"
                        },
                        new
                        {
                            InstructionId = 5,
                            Text = "check the screen well"
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Descrioption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PostDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("RequestCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewsCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ProductId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AreaId = 2,
                            CityId = 1,
                            Descrioption = "Lenovo Ideapad 330 Laptop, Intel Core i3-7020U, 15.6 Inch, 1TB, 4GB RAM, DOS - Platinum Grey",
                            PostDateTime = new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 8000.0,
                            RequestCount = 2,
                            StatusId = 1,
                            SubcategoryId = 1,
                            Title = "Lenovo Ideapad 330",
                            UserId = 2,
                            ViewsCount = 20
                        },
                        new
                        {
                            ProductId = 2,
                            AreaId = 3,
                            CityId = 2,
                            Descrioption = "Redmi Note 9 is equipped with a high-performance octa-core processor with a maximum clock speed of 3.0GHz, a GPU frequency of 1000MHz, for improved performance to provide you with a seamless gaming experience and implement your ideas.",
                            PostDateTime = new DateTime(2022, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 3450.0,
                            RequestCount = 10,
                            StatusId = 2,
                            SubcategoryId = 2,
                            Title = "Redmi note 9",
                            UserId = 1,
                            ViewsCount = 88
                        },
                        new
                        {
                            ProductId = 3,
                            AreaId = 5,
                            CityId = 3,
                            Descrioption = "new gaming chair 2022 model",
                            PostDateTime = new DateTime(2022, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 6500.0,
                            RequestCount = 5,
                            StatusId = 1,
                            SubcategoryId = 3,
                            Title = "Gaming Chair ITop 220",
                            UserId = 2,
                            ViewsCount = 60
                        },
                        new
                        {
                            ProductId = 4,
                            AreaId = 6,
                            CityId = 3,
                            Descrioption = "children shirt small and medium sizes",
                            PostDateTime = new DateTime(2022, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 50.0,
                            RequestCount = 3,
                            StatusId = 1,
                            SubcategoryId = 4,
                            Title = "children shirt",
                            UserId = 2,
                            ViewsCount = 110
                        },
                        new
                        {
                            ProductId = 5,
                            AreaId = 1,
                            CityId = 1,
                            Descrioption = "boys t-shirt medium and large sizes",
                            PostDateTime = new DateTime(2022, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.0,
                            RequestCount = 1,
                            StatusId = 2,
                            SubcategoryId = 7,
                            Title = "boys t-shirt",
                            UserId = 1,
                            ViewsCount = 90
                        },
                        new
                        {
                            ProductId = 6,
                            AreaId = 4,
                            CityId = 2,
                            Descrioption = "girls dress medium and large sizes",
                            PostDateTime = new DateTime(2021, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 250.0,
                            RequestCount = 0,
                            StatusId = 2,
                            SubcategoryId = 8,
                            Title = "girls dress",
                            UserId = 1,
                            ViewsCount = 5
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.ProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsImages");

                    b.HasData(
                        new
                        {
                            ProductImageId = 1,
                            Name = "lenovo1.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ProductImageId = 2,
                            Name = "lenovo2.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            ProductImageId = 3,
                            Name = "152419-review-hands-on-redmi-note-9-image1-rr6mm2jbpp.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            ProductImageId = 4,
                            Name = "nacon-gaming-chair-blue-pcch-310-bl.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            ProductImageId = 5,
                            Name = "New-Summer-Children-shirts-Printing-Anchor-pattern-Cotton-100-Short-sleeved-Boy-s-shirts-Fit-for.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            ProductImageId = 6,
                            Name = "16828269_35035155_300.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            ProductImageId = 7,
                            Name = "c827e760-197a-4dde-83fe-2975d46017de_large.jpg",
                            ProductId = 6
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.SliderImage", b =>
                {
                    b.Property<int>("SliderImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SliderImageId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderImageId");

                    b.ToTable("SliderImages");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            Name = "Staged"
                        },
                        new
                        {
                            StatusId = 2,
                            Name = "Sold"
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcategoryId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubcategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            SubcategoryId = 1,
                            CategoryId = 1,
                            Name = "Laptops"
                        },
                        new
                        {
                            SubcategoryId = 2,
                            CategoryId = 1,
                            Name = "Mobiles"
                        },
                        new
                        {
                            SubcategoryId = 3,
                            CategoryId = 2,
                            Name = "Chairs"
                        },
                        new
                        {
                            SubcategoryId = 4,
                            CategoryId = 3,
                            Name = "Children"
                        },
                        new
                        {
                            SubcategoryId = 5,
                            CategoryId = 3,
                            Name = "Men"
                        },
                        new
                        {
                            SubcategoryId = 6,
                            CategoryId = 3,
                            Name = "Women"
                        },
                        new
                        {
                            SubcategoryId = 7,
                            CategoryId = 3,
                            Name = "Boys"
                        },
                        new
                        {
                            SubcategoryId = 8,
                            CategoryId = 3,
                            Name = "Girls"
                        });
                });

            modelBuilder.Entity("DatabaseLayer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatabaseLayer.Models.Ad", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Area", b =>
                {
                    b.HasOne("DatabaseLayer.Models.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DatabaseLayer.Models.CategoryInstruction", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Category", "Category")
                        .WithMany("CategoryInstructions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatabaseLayer.Models.Instruction", "Instruction")
                        .WithMany("CategoryInstructions")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Favourite", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Product", "Product")
                        .WithMany("Favourites")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLayer.Models.User", "User")
                        .WithMany("Favourites")
                        .HasForeignKey("UserId1");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Notification", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Product", "Product")
                        .WithMany("Notifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Product", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Area", "Area")
                        .WithMany("Products")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseLayer.Models.City", "City")
                        .WithMany("Products")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DatabaseLayer.Models.User", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DatabaseLayer.Models.Status", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatabaseLayer.Models.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("City");

                    b.Navigation("Owner");

                    b.Navigation("Status");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("DatabaseLayer.Models.ProductImage", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Subcategory", b =>
                {
                    b.HasOne("DatabaseLayer.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DatabaseLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DatabaseLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DatabaseLayer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseLayer.Models.Area", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Category", b =>
                {
                    b.Navigation("CategoryInstructions");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("DatabaseLayer.Models.City", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Instruction", b =>
                {
                    b.Navigation("CategoryInstructions");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Product", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Notifications");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Status", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseLayer.Models.Subcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseLayer.Models.User", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
